{"version":3,"file":"index.umd.js","sources":["../src/fns/cpf.js"],"sourcesContent":["/**\r\n * * Transformar CPF\r\n * * Si no se le envian datos devuelve un string vacio\r\n * @param {*} data \r\n * @returns string \r\n */\r\nconst formatCpf = data => {\r\n    // convertir a string\r\n    data = data.toString()\r\n    \r\n    //remover todos los caracteres no numericos\r\n    data = data.replace(/[^\\d]/g, '');\r\n\r\n    // Validar si el dato proporcionado es un CPF válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de CPF\")\r\n        return \"\";\r\n    }\r\n\r\n    // Dar formato al CPF según el patrón estándar\r\n    let cpfFormatted;\r\n    if (data.length <= 6) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{1,3})/g, '$1.$2');\r\n    } else if (data.length <= 9) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{1,3})/g, '$1.$2.$3');\r\n    } else {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{1,2})/g, '$1.$2.$3-$4');\r\n    }\r\n    return cpfFormatted.slice(0, 14);\r\n}\r\n\r\nexport { formatCpf }"],"names":["data","toString","replace","length","slice","console","error"],"mappings":"kPAMkB,SAAAA,GAQd,OAHAA,GAHAA,EAAOA,EAAKC,YAGAC,QAAQ,SAAU,MAU1BF,EAAKG,QAAU,EACAH,EAAKE,QAAQ,oBAAqB,SAC1CF,EAAKG,QAAU,EACPH,EAAKE,QAAQ,2BAA4B,YAEzCF,EAAKE,QAAQ,kCAAmC,gBAE/CE,MAAM,EAAG,KAbzBC,QAAQC,MAAM,wBACP,GAaf"}