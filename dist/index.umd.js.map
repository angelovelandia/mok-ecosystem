{"version":3,"file":"index.umd.js","sources":["../src/fns/cpf.js","../src/fns/phone.js"],"sourcesContent":["/**\r\n * * Transformar CPF\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} data \r\n * @returns string \r\n */\r\nconst formatCpf = (data, func) => {\r\n    // convertir a string\r\n    data = data.toString()\r\n    \r\n    //remover todos los caracteres no numericos\r\n    data = data.replace(/[^\\d]/g, '');\r\n\r\n    // Validar si el dato proporcionado es un CPF válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de {CPF}\")\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(\"\");\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // Dar formato al CPF según el patrón estándar\r\n    let cpfFormatted;\r\n    if (data.length <= 6) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{1,3})/g, '$1.$2');\r\n    } else if (data.length <= 9) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{1,3})/g, '$1.$2.$3');\r\n    } else {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{1,2})/g, '$1.$2.$3-$4');\r\n    }\r\n\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        func(cpfFormatted.slice(0, 14));\r\n    } catch (error) {\r\n        return cpfFormatted.slice(0, 14);\r\n    }\r\n}\r\n\r\n/**\r\n * * Transformar CPF en onChange Generic\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} e event change \r\n * @returns string \r\n */\r\nconst formatCpfChange = (e, func) => {\r\n    //Validar que sea tipo event change\r\n    if(e.type !== \"change\"){\r\n      console.error(\"El evento debe ser tipo {change}\")\r\n      return \"\";\r\n    }\r\n    // convertir a string\r\n    let data = e.target.value.toString();\r\n\r\n    //remover todos los caracteres no numericos\r\n    data = data.replace(/[^\\d]/g, '');\r\n\r\n    // Validar si el dato proporcionado es un CPF válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de {PHONE}\")\r\n        //Modificando datos del event\r\n        e.target.value = \"\";\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(e);\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // Dar formato al CPF según el patrón estándar\r\n    let cpfFormatted;\r\n    if (data.length <= 6) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{1,3})/g, '$1.$2');\r\n    } else if (data.length <= 9) {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{1,3})/g, '$1.$2.$3');\r\n    } else {\r\n        cpfFormatted = data.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{1,2})/g, '$1.$2.$3-$4');\r\n    }\r\n\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        //Modificar contenido de evento en target value\r\n        e.target.value = cpfFormatted.slice(0, 14); \r\n        func(e);\r\n    } catch (error) {\r\n        return cpfFormatted.slice(0, 14);\r\n    }\r\n}\r\n\r\n/**\r\n * * Quitar formato de CPF y dejar en formato string\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} cpf sin formato\r\n * @returns string \r\n */\r\nconst clearFormatCpf = (e, func) => {\r\n    // convertir a string\r\n    let data = e.toString()\r\n    \r\n    // Validar si el dato proporcionado es un CPF válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de {CPF}\")\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(\"\");\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    //Formatear\r\n    data = data.replace(/[.-]/g,'');\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        func(data.slice(0, 14));\r\n    } catch (error) {\r\n        return data.slice(0, 14);\r\n    }\r\n}\r\n\r\n/**\r\n * * Validar si el formato del CPF es valido\r\n * * Si es errado retorna false\r\n * @param {*} cpf con formato\r\n * @returns boolean \r\n */\r\nconst isValidCpf = e => {\r\n    // convertir a string\r\n    let data = e.toString()\r\n    // Validar formato con regex 129.992.229-99\r\n    return /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(data);\r\n}\r\n\r\nexport { formatCpf, formatCpfChange, clearFormatCpf, isValidCpf }","/**\r\n * * Transformar PHONE\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} data \r\n * @returns string \r\n */\r\nconst formatPhone = (data, func)=> {\r\n\r\n    //remover todos los caracteres no numericos\r\n    data = data.replace(/[^\\d]/g, '');\r\n\r\n    // Validar que exista dato\r\n    if (!data) {\r\n        console.error(\"Dato invalido de PHONE\")\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(\"\");\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    //resivando datos para evitar errores de copiado y pegado\r\n    if(data && !data.startsWith(\"55\") && data.length >= 2) {\r\n        data = \"55\" + data; \r\n    }\r\n    \r\n    // convertir a string\r\n    let celular = data.toString();\r\n\r\n\r\n    // Concatenando indicativo\r\n    if(data && !celular.startsWith(\"55\") && celular.length === 2) {\r\n        celular = \"55\" + celular; \r\n    }\r\n\r\n    //remover todos los caracteres no numericos\r\n    celular = celular.replace(/[^\\d]/g, '');\r\n    var x = celular.replace(/\\D/g, '').match(/(\\d{0,2})(\\d{0,5})(\\d{0,4})/);\r\n    let phoneFormat = !x[2] ? x[1] : '(' + x[1] + ') ' + x[2] + (x[3] ? '-' + x[3] : '');\r\n\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        func(phoneFormat);\r\n    } catch (error) {\r\n        return phoneFormat;\r\n    }\r\n}\r\n\r\n/**\r\n * * Transformar PHONE en onChange Generic\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} e event change \r\n * @returns string \r\n */\r\nconst formatPhoneChange = (e, func) => {\r\n    //Validar que sea tipo event change\r\n    if(e.type !== \"change\"){\r\n      console.error(\"El evento debe ser tipo {change}\")\r\n      return \"\";\r\n    }\r\n    // convertir a string\r\n    let data = e.target.value.toString();\r\n    \r\n    //remover todos los caracteres no numericos\r\n    data = data.replace(/[^\\d]/g, '');\r\n    \r\n    // Validar si el dato proporcionado es un PHONE válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de {PHONE}\")\r\n        //Modificando datos del event\r\n        e.target.value = \"\";\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(e);\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    //resivando datos para evitar errores de copiado y pegado\r\n    if(data && !data.startsWith(\"55\") && data.length >= 2) {\r\n      data = \"55\" + data; \r\n    }\r\n    let celular = data;\r\n\r\n    // Concatenando indicativo\r\n    if(data && !celular.startsWith(\"55\") && celular.length === 2) {\r\n        celular = \"55\" + celular; \r\n    }\r\n    //remover todos los caracteres no numericos\r\n    celular = celular.replace(/[^\\d]/g, '');\r\n    var x = celular.replace(/\\D/g, '').match(/(\\d{0,2})(\\d{0,5})(\\d{0,4})/);\r\n    let phoneFormat = !x[2] ? x[1] : '(' + x[1] + ') ' + x[2] + (x[3] ? '-' + x[3] : '');\r\n\r\n    //Modificando datos del event\r\n    e.target.value = phoneFormat;\r\n\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        func(e);\r\n    } catch (error) {\r\n        return phoneFormat;\r\n    }\r\n}\r\n\r\n/**\r\n * * Quitar formato de PHONE y dejar en formato string\r\n * * Si no se le envian datos devuelve un string vacio\r\n * * Ejecuta funcion de manejo de estado y datos\r\n * @param {*} PHONE sin formato\r\n * @returns string \r\n */\r\nconst clearFormatPhone = (e, func) => {\r\n    // convertir a string\r\n    let data = e.toString()\r\n    \r\n    // Validar si el dato proporcionado es un PHONE válido\r\n    if (!data) {\r\n        console.error(\"Dato invalido de {PHONE}\")\r\n        //Revisar si viene una funcion en func\r\n        try {\r\n            return func(\"\");\r\n        } catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n    //Formatear\r\n    data = data.replace(/\\s+/g, '').replace(/[()-]/g, '');\r\n    //Revisar si viene una funcion en func\r\n    try {\r\n        func(data.slice(0, 15));\r\n    } catch (error) {\r\n        return data.slice(0, 15);\r\n    }\r\n}\r\n\r\n/**\r\n * * Validar si el formato del phone es valido\r\n * * Si es errado retorna false\r\n * @param {*} phone con formato\r\n * @returns boolean \r\n */\r\nconst isValidPhone = e => {\r\n    // convertir a string\r\n    let data = e.toString()\r\n    // Validar formato con regex (55) 12345-6465\r\n    let phoneRegex = /^\\(\\d{2}\\)\\s\\d{5}-\\d{4}$/;\r\n    let isValid = phoneRegex.test(data);\r\n    return isValid;\r\n}\r\n\r\nexport { formatPhone, formatPhoneChange, clearFormatPhone, isValidPhone }"],"names":["e","func","data","toString","console","error","replace","slice","cpfFormatted","length","type","target","value","startsWith","celular","x","match","phoneFormat","test"],"mappings":"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"}